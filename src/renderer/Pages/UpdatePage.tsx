import React, { FunctionComponent, useContext, useRef, useState } from 'react';
import { AppContext } from '../App';
import { DocumentUploadComponent } from '../Components/DocumentUpload';
import { DocumentTypeSelector } from '../Components/DocumentTypeSelector';
import { FaSpinner } from 'react-icons/fa';
import { FaFilePdf } from 'react-icons/fa';

import { Document as PDFDocument, Page, pdfjs } from 'react-pdf';

pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;

interface DocComponentProps {
  setReviewState: (isReview: boolean) => void;
}
interface DocProps {
  isUploaded: boolean;
  docID: string;
}
const KFS2DocComponent: FunctionComponent<DocComponentProps> = ({
  setReviewState,
}) => {
  const [currentStep, setCurrentStep] = useState<number>(1);
  const [engDocUploaded, setEngDocUploaded] = useState<DocProps>({
    isUploaded: false,
    docID: '',
  });
  const [chDocUploaded, setChDocUploaded] = useState<DocProps>({
    isUploaded: false,
    docID: '',
  });
  const [resDocID, setResDocID] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [resultURL, setResultURL] = useState<string>('');

  const handleSetEngDocInfo = (newState: boolean, docID: string) => {
    setEngDocUploaded({ isUploaded: newState, docID: docID });
  };
  const handleSetChDocInfo = (newState: boolean, docID: string) => {
    setChDocUploaded({ isUploaded: newState, docID: docID });
  };

  const handleReview = async () => {
    setIsLoading(true);
    const url = 'http://172.104.33.232:8000/project/update-translation';
    const data = {
      en_doc_id: engDocUploaded.docID,
      zh_doc_id: chDocUploaded.docID,
    };
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `${localStorage.getItem('auth-token')}`,
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const result = await response.json();
      console.log(result, result.document_id);
      setResDocID(result.document_id);
      const downPdfURL = `http://172.104.33.232:8000/project/download/pdf/${result.document_id}`;
      fetch(downPdfURL, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `${localStorage.getItem('auth-token')}`,
        },
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.blob();
        })
        .then((blob) => {
          const pdfUrl = URL.createObjectURL(blob);
          console.log(pdfUrl);
          setResultURL(pdfUrl);
        })
        .catch((error) => {
          console.error('Error fetching the PDF:', error);
        });

      setCurrentStep(currentStep + 1);
    } catch (error) {
      console.error('Error reviewing:', error);
    }

    setIsLoading(false);
  };

  const handleDownload = async () => {
    const downloadURL = `http://172.104.33.232:8000/project/download/${resDocID}`;
    const response = await fetch(downloadURL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `${localStorage.getItem('auth-token')}`,
      },
    });
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    const result = await response.json();
    console.log(result, result.link);

    try {
      // Replace 'fileUrl' with your file link

      // Fetching the file
      const response = await fetch(result.link);
      const blob = await response.blob();

      // Creating a temporary link to trigger the download
      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = 'downloadedFile'; // Set the file name here
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(downloadUrl);
    } catch (error) {
      console.error('Error downloading the file: ', error);
    }
  };
  const stepOne = (
    <>
      <div>Upload new English document and old Chinese document</div>
      <div
        className="flex justify-evenly w-full"
        style={{ height: 'calc(100% - 160px)' }}
      >
        <div className="w-1/2 p-1">
          <DocumentUploadComponent
            mode="English"
            isUploaded={engDocUploaded.isUploaded}
            setIsUploaded={handleSetEngDocInfo}
          />
        </div>
        <div className="w-1/2 p-1">
          <DocumentUploadComponent
            mode="Chinese"
            isUploaded={chDocUploaded.isUploaded}
            setIsUploaded={handleSetChDocInfo}
          />
        </div>
      </div>
      <div className="w-full h-24 bg-[#1B1D2A] rounded flex justify-end p-5 font-bold">
        <button
          className="bg-[#306BF3] border-solid border border-[#252637] flex items-center justify-between"
          onClick={handleReview}
          disabled={isLoading}
        >
          {isLoading && <FaSpinner className="spin-animation" />}
          Update
        </button>
      </div>
    </>
  );
  const stepTwo = (
    <div className="h-full flex space-x-4 justify-evenly">
      <object
        className="pdf-previewer custom-scroll"
        data={resultURL}
        type="application/pdf"
        width="80%"
        height="100%"
      >
        <p>
          Your browser does not support PDFs.
          <a href={resultURL}>Download the PDF</a>.
        </p>
      </object>
      <div className="flex flex-col space-y-4 w-[20%]">
        <div className="text-sm font-normal leading-normal text-stone-400 font-sans">
          You have uploaded the following two documents for review. Please check
          the review results on the left column.
        </div>
        <div className="w-full border border-slate-600 p-2 flex items-center text-red-700 overflow-hidden justify-start space-x-2 bold">
          <div>
            <FaFilePdf />
          </div>
          <div className="text-sm ">{engDocUploaded.docID}</div>
        </div>
        <div className="w-full border border-slate-600 p-2 flex items-center text-red-700 overflow-hidden justify-start space-x-2 bold">
          <div>
            <FaFilePdf />
          </div>
          <div className="text-sm ">{chDocUploaded.docID}</div>
        </div>
        <div
          className="w-full border border-slate-600 p-2 flex items-center text-white bg-[#3371BC] hover:bg-[#2C63A0] active:bg-[#1E4D80] overflow-hidden justify-center font-bold text-sm cursor-pointer space-x-2"
          onClick={handleDownload}
        >
          Download
        </div>
      </div>
    </div>
  );

  return (
    <div className="w-full h-full rounded-2xl bg-[#262732] p-5 text-2xl	space-y-4">
      {currentStep === 1 && stepOne}
      {currentStep === 2 && stepTwo}
    </div>
  );
};
const KFS1DocComponent: FunctionComponent<DocComponentProps> = ({
  setReviewState,
}) => {
  const [currentStep, setCurrentStep] = useState<number>(1);
  const [DocUploaded, setDocUploaded] = useState<DocProps>({
    isUploaded: false,
    docID: '',
  });
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [resDocID, setResDocID] = useState<string>('');
  const [resultURL, setResultURL] = useState<string>('');
  const handleSetEngDocInfo = (newState: boolean, docID: string) => {
    setDocUploaded({ isUploaded: newState, docID: docID });
  };
  const handleReview = async () => {
    setIsLoading(true);
    const url = 'http://172.104.33.232:8000/project/review-one';
    const data = {
      single_doc_id: DocUploaded.docID,
    };
    console.log(data);
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `${localStorage.getItem('auth-token')}`,
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const result = await response.json();
      console.log(result, result.document_id);
      setResDocID(result.document_id);
      const downPdfURL = `http://172.104.33.232:8000/project/download/pdf/${result.document_id}`;
      fetch(downPdfURL, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `${localStorage.getItem('auth-token')}`,
        },
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.blob();
        })
        .then((blob) => {
          const pdfUrl = URL.createObjectURL(blob);
          console.log(pdfUrl);
          setResultURL(pdfUrl);
        })
        .catch((error) => {
          console.error('Error fetching the PDF:', error);
        });

      setCurrentStep(currentStep + 1);
    } catch (error) {
      console.error('Error reviewing:', error);
    }

    setIsLoading(false);
  };

  const handleDownload = async () => {
    const downloadURL = `http://172.104.33.232:8000/project/download/${resDocID}`;
    const response = await fetch(downloadURL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `${localStorage.getItem('auth-token')}`,
      },
    });
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    const result = await response.json();
    console.log(result, result.link);

    try {
      // Replace 'fileUrl' with your file link

      // Fetching the file
      const response = await fetch(result.link);
      const blob = await response.blob();

      // Creating a temporary link to trigger the download
      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = 'downloadedFile'; // Set the file name here
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(downloadUrl);
    } catch (error) {
      console.error('Error downloading the file: ', error);
    }
  };

  const stepOne = (
    <>
      <div>Upload Single KFS document</div>
      <div
        className="flex justify-evenly w-full"
        style={{ height: 'calc(100% - 160px)' }}
      >
        <DocumentUploadComponent
          mode="Single KFS"
          isUploaded={DocUploaded.isUploaded}
          setIsUploaded={handleSetEngDocInfo}
        ></DocumentUploadComponent>
      </div>
      <div className="w-full h-24 bg-[#1B1D2A] rounded flex justify-end p-5 font-bold">
        <button
          className="bg-[#306BF3] border-solid border border-[#252637] flex items-center justify-between"
          onClick={handleReview}
          disabled={isLoading}
        >
          {isLoading && <FaSpinner className="spin-animation" />}
          Review
        </button>
      </div>
    </>
  );
  const stepTwo = (
    <div className="h-full flex space-x-4 justify-evenly">
      <object
        className="pdf-previewer custom-scroll"
        data={resultURL}
        type="application/pdf"
        width="80%"
        height="100%"
      >
        <p>
          Your browser does not support PDFs.
          <a href={resultURL}>Download the PDF</a>.
        </p>
      </object>
      <div className="flex flex-col space-y-4 w-[20%]">
        <div className="text-sm font-normal leading-normal text-stone-400 font-sans">
          You have uploaded the following two documents for review. Please check
          the review results on the left column.
        </div>
        <div className="w-full border border-slate-600 p-2 flex items-center text-red-700 overflow-hidden justify-start space-x-2 bold">
          <div>
            <FaFilePdf />
          </div>
          <div className="text-sm ">{DocUploaded.docID}</div>
        </div>
        <div
          className="w-full border border-slate-600 p-2 flex items-center text-white bg-[#3371BC] hover:bg-[#2C63A0] active:bg-[#1E4D80] overflow-hidden justify-center font-bold text-sm cursor-pointer space-x-2"
          onClick={handleDownload}
        >
          Download
        </div>
      </div>
    </div>
  );
  return (
    <div className="w-full h-full rounded-2xl bg-[#262732] p-5 text-2xl	space-y-4">
      {currentStep === 1 && stepOne}
      {currentStep === 2 && stepTwo}
    </div>
  );
};
const OtherDocComponent: FunctionComponent<DocComponentProps> = ({
  setReviewState,
}) => {
  const [engDocUploaded, setEngDocUploaded] = useState<boolean>(false);
  const [chDocUploaded, setChDocUploaded] = useState<boolean>(false);
  return (
    <div className="w-full h-full rounded-2xl bg-[#262732] p-5 text-2xl	space-y-4">
      <div>Upload 1 English document and 1 Chinese document</div>
      <div
        className="flex justify-evenly w-full"
        style={{ height: 'calc(100% - 160px)' }}
      >
        <div className="w-1/2 p-1">
          <DocumentUploadComponent
            mode="Other English"
            isUploaded={engDocUploaded}
            setIsUploaded={setEngDocUploaded}
          ></DocumentUploadComponent>
        </div>
        <div className="w-1/2 p-1">
          <DocumentUploadComponent
            mode="Other Chinese"
            isUploaded={chDocUploaded}
            setIsUploaded={setChDocUploaded}
          ></DocumentUploadComponent>
        </div>
      </div>
      <div className="w-full h-24 bg-[#1B1D2A] rounded flex justify-end p-5 font-bold">
        <button
          className="bg-[#306BF3] border-solid border border-[#252637]"
          onClick={() => setReviewState(true)}
        >
          Review
        </button>
      </div>
    </div>
  );
};

export default function UpdatePage() {
  const app = useContext(AppContext);
  const appName = 'Update Translation';

  const isShow = app?.currentPage === appName ? '' : 'hidden';
  const mWidth = app?.showMenu ? '50vw' : '50vw - 256px';

  const DocumentTypes = [
    '2 KFS Documents',
    'Single KFS Document',
    'Other Document',
  ];
  const [docType, setDocType] = useState<string>(DocumentTypes[0]);
  const [docReview, setDocReview] = useState<boolean>(false);
  const handleDocTypeChange = (newDocType: string) => {
    setDocType(newDocType);
  };
  const handleViewStateChange = (isReview: boolean) => {
    setDocReview(isReview);
  };
  return (
    <div className={`${isShow} p-8 pb-2 h-full w-full`}>
      <div className="">
        <svg
          width="299"
          height="23"
          viewBox="0 0 299 23"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M22.2617 0V9C22.2617 10.0625 22.2461 11.0312 22.2148 11.9062C22.1914 12.7812 22.1016 13.5664 21.9453 14.2617C21.7969 14.957 21.5586 15.5625 21.2305 16.0781C20.9023 16.5938 20.4336 17.0234 19.8242 17.3672C19.2148 17.7031 18.4375 17.9531 17.4922 18.1172C16.5547 18.2891 15.3984 18.375 14.0234 18.375H8.75C7.375 18.375 6.21484 18.2891 5.26953 18.1172C4.33203 17.9531 3.55859 17.7031 2.94922 17.3672C2.33984 17.0234 1.86719 16.5938 1.53125 16.0781C1.20312 15.5625 0.960938 14.957 0.804688 14.2617C0.65625 13.5664 0.570312 12.7812 0.546875 11.9062C0.523438 11.0312 0.511719 10.0625 0.511719 9V0H2.76172V9C2.76172 10.125 2.76953 11.0938 2.78516 11.9062C2.80859 12.7109 2.875 13.3906 2.98438 13.9453C3.09375 14.5 3.26562 14.9453 3.5 15.2812C3.74219 15.6172 4.08594 15.875 4.53125 16.0547C4.97656 16.2344 5.53906 16.3555 6.21875 16.418C6.90625 16.4727 7.75 16.5 8.75 16.5H14.0234C15.0156 16.5 15.8555 16.4727 16.543 16.418C17.2305 16.3555 17.793 16.2344 18.2305 16.0547C18.6758 15.875 19.0195 15.6172 19.2617 15.2812C19.5039 14.9453 19.6797 14.5 19.7891 13.9453C19.9062 13.3906 19.9727 12.7109 19.9883 11.9062C20.0039 11.0938 20.0117 10.125 20.0117 9L20 0H22.2617ZM33.5234 4.125C35.0234 4.125 36.2969 4.23828 37.3438 4.46484C38.3906 4.69141 39.2422 5.07812 39.8984 5.625C40.5547 6.17188 41.0312 6.90625 41.3281 7.82812C41.625 8.74219 41.7734 9.89062 41.7734 11.2734C41.7734 12.6328 41.625 13.7617 41.3281 14.6602C41.0312 15.5586 40.5547 16.2734 39.8984 16.8047C39.2422 17.3359 38.3906 17.7109 37.3438 17.9297C36.2969 18.1484 35.0234 18.2578 33.5234 18.2578C32.4531 18.2578 31.5586 18.1992 30.8398 18.082C30.1211 17.9648 29.5312 17.8203 29.0703 17.6484C28.6172 17.4688 28.2695 17.2773 28.0273 17.0742C27.793 16.8711 27.625 16.6797 27.5234 16.5V22.5H25.2734V4.5H27.5234V5.75391C27.625 5.59766 27.793 5.42578 28.0273 5.23828C28.2695 5.04297 28.6172 4.86328 29.0703 4.69922C29.5312 4.53516 30.1211 4.39844 30.8398 4.28906C31.5586 4.17969 32.4531 4.125 33.5234 4.125ZM33.5234 6C32.7734 6 32.1055 6.01953 31.5195 6.05859C30.9336 6.09766 30.418 6.17969 29.9727 6.30469C29.5273 6.42188 29.1484 6.59766 28.8359 6.83203C28.5312 7.05859 28.2812 7.36719 28.0859 7.75781C27.8906 8.14062 27.7461 8.61719 27.6523 9.1875C27.5664 9.75781 27.5234 10.4414 27.5234 11.2383C27.5234 12.043 27.5664 12.7344 27.6523 13.3125C27.7461 13.8906 27.8906 14.375 28.0859 14.7656C28.2812 15.1484 28.5312 15.457 28.8359 15.6914C29.1484 15.918 29.5273 16.0938 29.9727 16.2188C30.418 16.3359 30.9336 16.4141 31.5195 16.4531C32.1055 16.4844 32.7734 16.5 33.5234 16.5C34.3984 16.5 35.1523 16.4727 35.7852 16.418C36.4258 16.3633 36.9688 16.2656 37.4141 16.125C37.8594 15.9844 38.2188 15.7891 38.4922 15.5391C38.7734 15.2891 38.9883 14.9727 39.1367 14.5898C39.293 14.1992 39.3945 13.7344 39.4414 13.1953C39.4961 12.6484 39.5234 12.0078 39.5234 11.2734C39.5234 10.5391 39.4961 9.89844 39.4414 9.35156C39.3945 8.80469 39.293 8.33594 39.1367 7.94531C38.9883 7.55469 38.7734 7.23438 38.4922 6.98438C38.2188 6.73438 37.8594 6.53516 37.4141 6.38672C36.9688 6.23828 36.4258 6.13672 35.7852 6.08203C35.1523 6.02734 34.3984 6 33.5234 6ZM52.2734 18.2578C50.7734 18.2578 49.5 18.1484 48.4531 17.9297C47.4062 17.7109 46.5547 17.3359 45.8984 16.8047C45.2422 16.2734 44.7656 15.5586 44.4688 14.6602C44.1719 13.7617 44.0234 12.6328 44.0234 11.2734C44.0234 9.86719 44.1719 8.70312 44.4688 7.78125C44.7656 6.85938 45.2422 6.12891 45.8984 5.58984C46.5547 5.05078 47.4062 4.67188 48.4531 4.45312C49.5 4.23437 50.7734 4.125 52.2734 4.125C53.3359 4.125 54.2266 4.17969 54.9453 4.28906C55.6641 4.39844 56.25 4.53516 56.7031 4.69922C57.1641 4.86328 57.5117 5.04297 57.7461 5.23828C57.9883 5.42578 58.1641 5.60156 58.2734 5.76562V0H60.5234V18H58.2734V15.9961C58.2734 15.9961 58.0859 16.2188 57.7109 16.6641C57.3828 16.9844 57.0195 17.2422 56.6211 17.4375C56.2227 17.6328 55.6641 17.8203 54.9453 18C54.2266 18.1719 53.3359 18.2578 52.2734 18.2578ZM52.2734 16.5C53.0234 16.5 53.6914 16.4844 54.2773 16.4531C54.8633 16.4141 55.3789 16.3359 55.8242 16.2188C56.2695 16.1016 56.6445 15.9297 56.9492 15.7031C57.2617 15.4688 57.5156 15.1602 57.7109 14.7773C57.9062 14.3945 58.0469 13.9219 58.1328 13.3594C58.2266 12.7891 58.2734 12.1055 58.2734 11.3086C58.2734 10.4805 58.2266 9.77734 58.1328 9.19922C58.0469 8.61328 57.9062 8.125 57.7109 7.73438C57.5156 7.33594 57.2617 7.02344 56.9492 6.79688C56.6445 6.57031 56.2695 6.39844 55.8242 6.28125C55.3789 6.15625 54.8633 6.07812 54.2773 6.04688C53.6914 6.01562 53.0234 6 52.2734 6C51.3984 6 50.6406 6.02734 50 6.08203C49.3672 6.13672 48.8281 6.23438 48.3828 6.375C47.9375 6.51562 47.5742 6.71094 47.293 6.96094C47.0195 7.21094 46.8047 7.53125 46.6484 7.92188C46.5 8.3125 46.3984 8.78516 46.3438 9.33984C46.2969 9.88672 46.2734 10.5312 46.2734 11.2734C46.2734 12.0078 46.2969 12.6484 46.3438 13.1953C46.3984 13.7344 46.5 14.1992 46.6484 14.5898C46.8047 14.9727 47.0195 15.2891 47.293 15.5391C47.5742 15.7891 47.9375 15.9844 48.3828 16.125C48.8281 16.2656 49.3672 16.3633 50 16.418C50.6406 16.4727 51.3984 16.5 52.2734 16.5ZM76.9648 16.1484C76.9414 16.2422 76.7656 16.4766 76.4375 16.8516C76.2031 17.1328 75.8906 17.3828 75.5 17.6016C75.1094 17.8125 74.5859 17.9766 73.9297 18.0938C73.2812 18.2188 72.4258 18.2812 71.3633 18.2812C69.9492 18.2812 68.7422 18.207 67.7422 18.0586C66.7422 17.918 65.9258 17.6992 65.293 17.4023C64.6602 17.0977 64.1953 16.7109 63.8984 16.2422C63.6094 15.7734 63.4648 15.2148 63.4648 14.5664C63.4648 13.8867 63.543 13.3125 63.6992 12.8438C63.8633 12.3672 64.0977 11.9688 64.4023 11.6484C64.7148 11.3281 65.0898 11.0781 65.5273 10.8984C65.9648 10.7188 66.4609 10.582 67.0156 10.4883C67.5781 10.3945 68.1914 10.3359 68.8555 10.3125C69.5195 10.2891 70.2266 10.2773 70.9766 10.2773C72.0469 10.2773 72.9414 10.3242 73.6602 10.418C74.3789 10.5039 74.9648 10.6172 75.418 10.7578C75.8789 10.8906 76.2266 11.0352 76.4609 11.1914C76.6953 11.3477 76.8633 11.4922 76.9648 11.625C76.9648 10.75 76.9258 10.0039 76.8477 9.38672C76.7773 8.76953 76.6562 8.25391 76.4844 7.83984C76.3203 7.42578 76.1055 7.09766 75.8398 6.85547C75.5742 6.60547 75.2461 6.41797 74.8555 6.29297C74.4727 6.16797 74.0234 6.08984 73.5078 6.05859C72.9922 6.01953 72.4023 6 71.7383 6C70.707 6 69.8516 6.02734 69.1719 6.08203C68.4922 6.12891 67.9531 6.22656 67.5547 6.375C67.1562 6.52344 66.875 6.73047 66.7109 6.99609C66.5469 7.25391 66.4648 7.59375 66.4648 8.01562H64.2148C64.2148 7.30469 64.3398 6.70312 64.5898 6.21094C64.8477 5.71875 65.2695 5.32031 65.8555 5.01562C66.4492 4.70312 67.2266 4.47656 68.1875 4.33594C69.1484 4.19531 70.332 4.125 71.7383 4.125C73.1133 4.125 74.2773 4.23828 75.2305 4.46484C76.1836 4.69141 76.9531 5.08984 77.5391 5.66016C78.1328 6.23047 78.5586 7 78.8164 7.96875C79.082 8.92969 79.2148 10.1484 79.2148 11.625V18H76.9648V16.1484ZM71.7383 16.5C72.7305 16.5 73.5586 16.4531 74.2227 16.3594C74.8945 16.2656 75.4336 16.125 75.8398 15.9375C76.2461 15.75 76.5352 15.5156 76.707 15.2344C76.8789 14.9531 76.9648 14.625 76.9648 14.25C76.9648 13.875 76.8633 13.5586 76.6602 13.3008C76.4648 13.0352 76.1328 12.8203 75.6641 12.6562C75.2031 12.4922 74.5898 12.375 73.8242 12.3047C73.0586 12.2266 72.1133 12.1875 70.9883 12.1875C69.8633 12.1875 68.9531 12.207 68.2578 12.2461C67.5703 12.2852 67.0391 12.375 66.6641 12.5156C66.2891 12.6562 66.0352 12.8633 65.9023 13.1367C65.7773 13.4102 65.7148 13.7812 65.7148 14.25C65.7148 14.7188 65.7812 15.1016 65.9141 15.3984C66.0547 15.6875 66.3359 15.9141 66.7578 16.0781C67.1797 16.2422 67.7852 16.3555 68.5742 16.418C69.3711 16.4727 70.4258 16.5 71.7383 16.5ZM95.3516 12C95.3516 13.1484 95.2578 14.1094 95.0703 14.8828C94.8828 15.6484 94.5664 16.2617 94.1211 16.7227C93.6836 17.1836 93.1055 17.5117 92.3867 17.707C91.668 17.9023 90.7812 18 89.7266 18C88.7031 18 87.8438 17.9219 87.1484 17.7656C86.4531 17.6094 85.8906 17.3438 85.4609 16.9688C85.0312 16.5938 84.7227 16.0938 84.5352 15.4688C84.3477 14.8438 84.2539 14.0625 84.2539 13.125V6.35156H81.4766V4.5H84.2539V0.808594H86.5039V4.5H94.9766V6.35156H86.5039V13.125C86.5039 13.875 86.5586 14.4531 86.668 14.8594C86.7852 15.2656 86.9688 15.5625 87.2188 15.75C87.4688 15.9375 87.7969 16.0469 88.2031 16.0781C88.6172 16.1094 89.1211 16.125 89.7148 16.125C90.1836 16.125 90.6016 16.1172 90.9688 16.1016C91.3438 16.0859 91.668 16.0391 91.9414 15.9609C92.2227 15.875 92.4609 15.75 92.6562 15.5859C92.8516 15.4141 93.0078 15.1758 93.125 14.8711C93.25 14.5664 93.3398 14.1836 93.3945 13.7227C93.4492 13.2539 93.4766 12.6797 93.4766 12H95.3516ZM105.477 18.2578C103.977 18.2578 102.703 18.1562 101.656 17.9531C100.609 17.7422 99.7578 17.3828 99.1016 16.875C98.4453 16.3672 97.9688 15.6875 97.6719 14.8359C97.375 13.9844 97.2266 12.9141 97.2266 11.625C97.2266 10.1484 97.375 8.92969 97.6719 7.96875C97.9688 7 98.4453 6.23047 99.1016 5.66016C99.7578 5.08984 100.609 4.69141 101.656 4.46484C102.703 4.23828 103.977 4.125 105.477 4.125C106.547 4.125 107.473 4.20313 108.254 4.35938C109.043 4.51562 109.715 4.74219 110.27 5.03906C110.832 5.33594 111.285 5.69531 111.629 6.11719C111.98 6.53906 112.254 6.98438 112.449 7.45312C112.652 7.91406 112.789 8.45703 112.859 9.08203C112.938 9.70703 112.977 10.3672 112.977 11.0625L112.789 11.8125H99.4766C99.4766 12.8438 99.5781 13.6914 99.7812 14.3555C99.9844 15.0117 100.32 15.4922 100.789 15.7969C101.258 16.1016 101.875 16.2969 102.641 16.3828C103.406 16.4609 104.352 16.5 105.477 16.5C106.508 16.5 107.359 16.4727 108.031 16.418C108.711 16.3555 109.25 16.2422 109.648 16.0781C110.047 15.9141 110.324 15.6875 110.48 15.3984C110.645 15.1016 110.727 14.7188 110.727 14.25H112.977C112.977 14.9766 112.848 15.5977 112.59 16.1133C112.34 16.6211 111.922 17.0352 111.336 17.3555C110.75 17.668 109.977 17.8945 109.016 18.0352C108.062 18.1836 106.883 18.2578 105.477 18.2578ZM105.477 6C104.727 6 104.055 6.01562 103.461 6.04688C102.875 6.07812 102.359 6.14844 101.914 6.25781C101.477 6.35938 101.102 6.51172 100.789 6.71484C100.477 6.91016 100.223 7.14453 100.027 7.41797C99.8398 7.68359 99.6992 8.0625 99.6055 8.55469C99.5195 9.03906 99.4766 9.625 99.4766 10.3125H110.727C110.727 9.39844 110.629 8.68359 110.434 8.16797C110.238 7.64453 109.93 7.21484 109.508 6.87891C109.086 6.54297 108.543 6.3125 107.879 6.1875C107.215 6.0625 106.414 6 105.477 6ZM141.477 0V1.875H132.477V18H130.227V1.875H121.227V0H141.477ZM156.102 8.89453C156.102 8.33203 156.059 7.86719 155.973 7.5C155.895 7.125 155.703 6.82812 155.398 6.60938C155.094 6.38281 154.641 6.22656 154.039 6.14062C153.445 6.04688 152.633 6 151.602 6C150.594 6 149.773 6.08984 149.141 6.26953C148.508 6.44141 148.012 6.6875 147.652 7.00781C147.293 7.32812 147.047 7.71094 146.914 8.15625C146.789 8.60156 146.727 9.09766 146.727 9.64453V18H144.477V4.5H146.727V6.64453C146.805 6.40234 146.949 6.13672 147.16 5.84766C147.371 5.55078 147.691 5.27734 148.121 5.02734C148.551 4.76953 149.105 4.55469 149.785 4.38281C150.473 4.21094 151.328 4.125 152.352 4.125C153.523 4.125 154.477 4.23047 155.211 4.44141C155.945 4.64453 156.516 4.94922 156.922 5.35547C157.336 5.75391 157.613 6.25 157.754 6.84375C157.902 7.4375 157.977 8.12109 157.977 8.89453H156.102ZM172.918 16.1484C172.895 16.2422 172.719 16.4766 172.391 16.8516C172.156 17.1328 171.844 17.3828 171.453 17.6016C171.062 17.8125 170.539 17.9766 169.883 18.0938C169.234 18.2188 168.379 18.2812 167.316 18.2812C165.902 18.2812 164.695 18.207 163.695 18.0586C162.695 17.918 161.879 17.6992 161.246 17.4023C160.613 17.0977 160.148 16.7109 159.852 16.2422C159.562 15.7734 159.418 15.2148 159.418 14.5664C159.418 13.8867 159.496 13.3125 159.652 12.8438C159.816 12.3672 160.051 11.9688 160.355 11.6484C160.668 11.3281 161.043 11.0781 161.48 10.8984C161.918 10.7188 162.414 10.582 162.969 10.4883C163.531 10.3945 164.145 10.3359 164.809 10.3125C165.473 10.2891 166.18 10.2773 166.93 10.2773C168 10.2773 168.895 10.3242 169.613 10.418C170.332 10.5039 170.918 10.6172 171.371 10.7578C171.832 10.8906 172.18 11.0352 172.414 11.1914C172.648 11.3477 172.816 11.4922 172.918 11.625C172.918 10.75 172.879 10.0039 172.801 9.38672C172.73 8.76953 172.609 8.25391 172.438 7.83984C172.273 7.42578 172.059 7.09766 171.793 6.85547C171.527 6.60547 171.199 6.41797 170.809 6.29297C170.426 6.16797 169.977 6.08984 169.461 6.05859C168.945 6.01953 168.355 6 167.691 6C166.66 6 165.805 6.02734 165.125 6.08203C164.445 6.12891 163.906 6.22656 163.508 6.375C163.109 6.52344 162.828 6.73047 162.664 6.99609C162.5 7.25391 162.418 7.59375 162.418 8.01562H160.168C160.168 7.30469 160.293 6.70312 160.543 6.21094C160.801 5.71875 161.223 5.32031 161.809 5.01562C162.402 4.70312 163.18 4.47656 164.141 4.33594C165.102 4.19531 166.285 4.125 167.691 4.125C169.066 4.125 170.23 4.23828 171.184 4.46484C172.137 4.69141 172.906 5.08984 173.492 5.66016C174.086 6.23047 174.512 7 174.77 7.96875C175.035 8.92969 175.168 10.1484 175.168 11.625V18H172.918V16.1484ZM167.691 16.5C168.684 16.5 169.512 16.4531 170.176 16.3594C170.848 16.2656 171.387 16.125 171.793 15.9375C172.199 15.75 172.488 15.5156 172.66 15.2344C172.832 14.9531 172.918 14.625 172.918 14.25C172.918 13.875 172.816 13.5586 172.613 13.3008C172.418 13.0352 172.086 12.8203 171.617 12.6562C171.156 12.4922 170.543 12.375 169.777 12.3047C169.012 12.2266 168.066 12.1875 166.941 12.1875C165.816 12.1875 164.906 12.207 164.211 12.2461C163.523 12.2852 162.992 12.375 162.617 12.5156C162.242 12.6562 161.988 12.8633 161.855 13.1367C161.73 13.4102 161.668 13.7812 161.668 14.25C161.668 14.7188 161.734 15.1016 161.867 15.3984C162.008 15.6875 162.289 15.9141 162.711 16.0781C163.133 16.2422 163.738 16.3555 164.527 16.418C165.324 16.4727 166.379 16.5 167.691 16.5ZM191.68 18V10.5C191.68 9.66406 191.617 8.96094 191.492 8.39062C191.367 7.8125 191.117 7.34766 190.742 6.99609C190.367 6.64453 189.836 6.39062 189.148 6.23438C188.461 6.07812 187.555 6 186.43 6C185.211 6 184.211 6.08984 183.43 6.26953C182.656 6.44922 182.047 6.70312 181.602 7.03125C181.156 7.35938 180.848 7.75391 180.676 8.21484C180.512 8.67578 180.43 9.1875 180.43 9.75V18H178.18V4.5H180.43V6.75C180.594 6.36719 180.828 6.03906 181.133 5.76562C181.438 5.48438 181.781 5.24609 182.164 5.05078C182.547 4.85547 182.961 4.69922 183.406 4.58203C183.852 4.45703 184.297 4.36328 184.742 4.30078C185.188 4.23047 185.617 4.18359 186.031 4.16016C186.453 4.13672 186.836 4.125 187.18 4.125C188.18 4.125 189.039 4.1875 189.758 4.3125C190.484 4.4375 191.098 4.62109 191.598 4.86328C192.105 5.10547 192.512 5.40625 192.816 5.76562C193.121 6.125 193.355 6.54297 193.52 7.01953C193.691 7.48828 193.805 8.01562 193.859 8.60156C193.914 9.17969 193.941 9.8125 193.941 10.5L193.93 18H191.68ZM204.828 11.8477C203.766 11.8477 202.832 11.832 202.027 11.8008C201.223 11.7695 200.527 11.707 199.941 11.6133C199.363 11.5117 198.879 11.3711 198.488 11.1914C198.105 11.0117 197.801 10.7734 197.574 10.4766C197.348 10.1719 197.188 9.80078 197.094 9.36328C197 8.91797 196.953 8.4375 196.953 7.92188C196.953 7.21875 197.102 6.62891 197.398 6.15234C197.695 5.66797 198.172 5.27734 198.828 4.98047C199.484 4.67578 200.336 4.45703 201.383 4.32422C202.43 4.19141 203.703 4.125 205.203 4.125C206.688 4.125 207.91 4.20313 208.871 4.35938C209.84 4.51562 210.605 4.75781 211.168 5.08594C211.738 5.40625 212.137 5.8125 212.363 6.30469C212.59 6.79688 212.703 7.38281 212.703 8.0625H210.453C210.453 7.64062 210.371 7.29688 210.207 7.03125C210.051 6.76562 209.773 6.55859 209.375 6.41016C208.977 6.25391 208.438 6.14844 207.758 6.09375C207.086 6.03125 206.234 6 205.203 6C204.078 6 203.133 6.01562 202.367 6.04688C201.602 6.07812 200.984 6.15625 200.516 6.28125C200.047 6.40625 199.711 6.59766 199.508 6.85547C199.305 7.11328 199.203 7.46875 199.203 7.92188C199.203 8.1875 199.219 8.44922 199.25 8.70703C199.289 8.95703 199.371 9.16406 199.496 9.32812C199.621 9.49219 199.805 9.61719 200.047 9.70312C200.289 9.78906 200.617 9.85547 201.031 9.90234C201.453 9.94141 201.973 9.96484 202.59 9.97266C203.207 9.97266 203.953 9.97266 204.828 9.97266C205.891 9.97266 206.82 9.99609 207.617 10.043C208.422 10.0898 209.117 10.1719 209.703 10.2891C210.289 10.4062 210.773 10.5859 211.156 10.8281C211.539 11.0703 211.844 11.3359 212.07 11.625C212.305 11.9062 212.469 12.2422 212.562 12.6328C212.656 13.0156 212.703 13.4609 212.703 13.9688C212.703 14.4766 212.656 14.9336 212.562 15.3398C212.469 15.7383 212.305 16.0938 212.07 16.4062C211.836 16.7109 211.516 16.9766 211.109 17.2031C210.711 17.4219 210.207 17.6016 209.598 17.7422C208.988 17.875 208.258 17.9727 207.406 18.0352C206.562 18.1055 205.578 18.1406 204.453 18.1406C203.047 18.1406 201.863 18.0703 200.902 17.9297C199.949 17.7891 199.18 17.5664 198.594 17.2617C198.008 16.9492 197.586 16.5469 197.328 16.0547C197.078 15.5625 196.953 14.9609 196.953 14.25H199.203C199.203 14.7188 199.281 15.1016 199.438 15.3984C199.602 15.6875 199.883 15.9141 200.281 16.0781C200.68 16.2422 201.215 16.3555 201.887 16.418C202.566 16.4727 203.422 16.5 204.453 16.5C205.391 16.5 206.188 16.4805 206.844 16.4414C207.508 16.3945 208.062 16.3242 208.508 16.2305C208.953 16.1367 209.305 16.0234 209.562 15.8906C209.82 15.7578 210.016 15.5977 210.148 15.4102C210.281 15.2227 210.363 15.0156 210.395 14.7891C210.434 14.5547 210.453 14.2969 210.453 14.0156C210.453 13.7578 210.434 13.5312 210.395 13.3359C210.363 13.1328 210.285 12.9336 210.16 12.7383C210.035 12.5352 209.852 12.3828 209.609 12.2812C209.367 12.1797 209.035 12.0977 208.613 12.0352C208.199 11.9648 207.684 11.918 207.066 11.8945C206.449 11.8633 205.703 11.8477 204.828 11.8477ZM216.453 0H218.703V18H216.453V0ZM235.895 16.1484C235.871 16.2422 235.695 16.4766 235.367 16.8516C235.133 17.1328 234.82 17.3828 234.43 17.6016C234.039 17.8125 233.516 17.9766 232.859 18.0938C232.211 18.2188 231.355 18.2812 230.293 18.2812C228.879 18.2812 227.672 18.207 226.672 18.0586C225.672 17.918 224.855 17.6992 224.223 17.4023C223.59 17.0977 223.125 16.7109 222.828 16.2422C222.539 15.7734 222.395 15.2148 222.395 14.5664C222.395 13.8867 222.473 13.3125 222.629 12.8438C222.793 12.3672 223.027 11.9688 223.332 11.6484C223.645 11.3281 224.02 11.0781 224.457 10.8984C224.895 10.7188 225.391 10.582 225.945 10.4883C226.508 10.3945 227.121 10.3359 227.785 10.3125C228.449 10.2891 229.156 10.2773 229.906 10.2773C230.977 10.2773 231.871 10.3242 232.59 10.418C233.309 10.5039 233.895 10.6172 234.348 10.7578C234.809 10.8906 235.156 11.0352 235.391 11.1914C235.625 11.3477 235.793 11.4922 235.895 11.625C235.895 10.75 235.855 10.0039 235.777 9.38672C235.707 8.76953 235.586 8.25391 235.414 7.83984C235.25 7.42578 235.035 7.09766 234.77 6.85547C234.504 6.60547 234.176 6.41797 233.785 6.29297C233.402 6.16797 232.953 6.08984 232.438 6.05859C231.922 6.01953 231.332 6 230.668 6C229.637 6 228.781 6.02734 228.102 6.08203C227.422 6.12891 226.883 6.22656 226.484 6.375C226.086 6.52344 225.805 6.73047 225.641 6.99609C225.477 7.25391 225.395 7.59375 225.395 8.01562H223.145C223.145 7.30469 223.27 6.70312 223.52 6.21094C223.777 5.71875 224.199 5.32031 224.785 5.01562C225.379 4.70312 226.156 4.47656 227.117 4.33594C228.078 4.19531 229.262 4.125 230.668 4.125C232.043 4.125 233.207 4.23828 234.16 4.46484C235.113 4.69141 235.883 5.08984 236.469 5.66016C237.062 6.23047 237.488 7 237.746 7.96875C238.012 8.92969 238.145 10.1484 238.145 11.625V18H235.895V16.1484ZM230.668 16.5C231.66 16.5 232.488 16.4531 233.152 16.3594C233.824 16.2656 234.363 16.125 234.77 15.9375C235.176 15.75 235.465 15.5156 235.637 15.2344C235.809 14.9531 235.895 14.625 235.895 14.25C235.895 13.875 235.793 13.5586 235.59 13.3008C235.395 13.0352 235.062 12.8203 234.594 12.6562C234.133 12.4922 233.52 12.375 232.754 12.3047C231.988 12.2266 231.043 12.1875 229.918 12.1875C228.793 12.1875 227.883 12.207 227.188 12.2461C226.5 12.2852 225.969 12.375 225.594 12.5156C225.219 12.6562 224.965 12.8633 224.832 13.1367C224.707 13.4102 224.645 13.7812 224.645 14.25C224.645 14.7188 224.711 15.1016 224.844 15.3984C224.984 15.6875 225.266 15.9141 225.688 16.0781C226.109 16.2422 226.715 16.3555 227.504 16.418C228.301 16.4727 229.355 16.5 230.668 16.5ZM254.281 12C254.281 13.1484 254.188 14.1094 254 14.8828C253.812 15.6484 253.496 16.2617 253.051 16.7227C252.613 17.1836 252.035 17.5117 251.316 17.707C250.598 17.9023 249.711 18 248.656 18C247.633 18 246.773 17.9219 246.078 17.7656C245.383 17.6094 244.82 17.3438 244.391 16.9688C243.961 16.5938 243.652 16.0938 243.465 15.4688C243.277 14.8438 243.184 14.0625 243.184 13.125V6.35156H240.406V4.5H243.184V0.808594H245.434V4.5H253.906V6.35156H245.434V13.125C245.434 13.875 245.488 14.4531 245.598 14.8594C245.715 15.2656 245.898 15.5625 246.148 15.75C246.398 15.9375 246.727 16.0469 247.133 16.0781C247.547 16.1094 248.051 16.125 248.645 16.125C249.113 16.125 249.531 16.1172 249.898 16.1016C250.273 16.0859 250.598 16.0391 250.871 15.9609C251.152 15.875 251.391 15.75 251.586 15.5859C251.781 15.4141 251.938 15.1758 252.055 14.8711C252.18 14.5664 252.27 14.1836 252.324 13.7227C252.379 13.2539 252.406 12.6797 252.406 12H254.281ZM258.031 4.5H260.281V18H258.031V4.5ZM260.281 2.25H258.031V0H260.281V2.25ZM263.656 11.1562C263.656 9.77344 263.805 8.62891 264.102 7.72266C264.398 6.81641 264.875 6.09766 265.531 5.56641C266.188 5.03516 267.039 4.66406 268.086 4.45312C269.133 4.23437 270.406 4.125 271.906 4.125C273.406 4.125 274.68 4.23437 275.727 4.45312C276.773 4.66406 277.625 5.03516 278.281 5.56641C278.938 6.09766 279.414 6.81641 279.711 7.72266C280.008 8.62891 280.156 9.77344 280.156 11.1562C280.156 12.5391 280.008 13.6875 279.711 14.6016C279.414 15.5156 278.938 16.2422 278.281 16.7812C277.625 17.3203 276.773 17.7031 275.727 17.9297C274.68 18.1484 273.406 18.2578 271.906 18.2578C270.406 18.2578 269.133 18.1484 268.086 17.9297C267.039 17.7031 266.188 17.3203 265.531 16.7812C264.875 16.2422 264.398 15.5156 264.102 14.6016C263.805 13.6875 263.656 12.5391 263.656 11.1562ZM265.906 11.1562C265.906 11.9062 265.934 12.5586 265.988 13.1133C266.043 13.668 266.145 14.1445 266.293 14.543C266.449 14.9414 266.664 15.2656 266.938 15.5156C267.211 15.7656 267.57 15.9648 268.016 16.1133C268.461 16.2617 269 16.3633 269.633 16.418C270.273 16.4727 271.031 16.5 271.906 16.5C272.656 16.5 273.324 16.4844 273.91 16.4531C274.504 16.4141 275.02 16.332 275.457 16.207C275.902 16.082 276.281 15.9062 276.594 15.6797C276.906 15.4453 277.156 15.1289 277.344 14.7305C277.539 14.332 277.68 13.8438 277.766 13.2656C277.859 12.6797 277.906 11.9766 277.906 11.1562C277.906 10.3516 277.859 9.66797 277.766 9.10547C277.68 8.53516 277.539 8.05859 277.344 7.67578C277.156 7.29297 276.906 6.99219 276.594 6.77344C276.281 6.54688 275.902 6.37891 275.457 6.26953C275.02 6.15234 274.504 6.07812 273.91 6.04688C273.324 6.01562 272.656 6 271.906 6C271.156 6 270.484 6.01562 269.891 6.04688C269.305 6.07812 268.789 6.15234 268.344 6.26953C267.906 6.37891 267.531 6.54688 267.219 6.77344C266.906 6.99219 266.652 7.29297 266.457 7.67578C266.27 8.05859 266.129 8.53516 266.035 9.10547C265.949 9.66797 265.906 10.3516 265.906 11.1562ZM296.281 18V10.5C296.281 9.66406 296.219 8.96094 296.094 8.39062C295.969 7.8125 295.719 7.34766 295.344 6.99609C294.969 6.64453 294.438 6.39062 293.75 6.23438C293.062 6.07812 292.156 6 291.031 6C289.812 6 288.812 6.08984 288.031 6.26953C287.258 6.44922 286.648 6.70312 286.203 7.03125C285.758 7.35938 285.449 7.75391 285.277 8.21484C285.113 8.67578 285.031 9.1875 285.031 9.75V18H282.781V4.5H285.031V6.75C285.195 6.36719 285.43 6.03906 285.734 5.76562C286.039 5.48438 286.383 5.24609 286.766 5.05078C287.148 4.85547 287.562 4.69922 288.008 4.58203C288.453 4.45703 288.898 4.36328 289.344 4.30078C289.789 4.23047 290.219 4.18359 290.633 4.16016C291.055 4.13672 291.438 4.125 291.781 4.125C292.781 4.125 293.641 4.1875 294.359 4.3125C295.086 4.4375 295.699 4.62109 296.199 4.86328C296.707 5.10547 297.113 5.40625 297.418 5.76562C297.723 6.125 297.957 6.54297 298.121 7.01953C298.293 7.48828 298.406 8.01562 298.461 8.60156C298.516 9.17969 298.543 9.8125 298.543 10.5L298.531 18H296.281Z"
            fill="white"
          />
        </svg>
      </div>
      <div className="w-full border-t border-white-500 mt-5 mb-10" />
      {docReview ? (
        <>wwww</>
      ) : (
        <>
          <DocumentTypeSelector
            options={DocumentTypes}
            changeDocType={handleDocTypeChange}
          ></DocumentTypeSelector>
          <div
            className="my-10 w-full"
            style={{ height: 'calc(100% - 150px)' }}
          >
            {docType === DocumentTypes[0] && (
              <KFS2DocComponent
                setReviewState={handleViewStateChange}
              ></KFS2DocComponent>
            )}
            {docType === DocumentTypes[1] && (
              <KFS1DocComponent
                setReviewState={handleViewStateChange}
              ></KFS1DocComponent>
            )}
            {docType === DocumentTypes[2] && (
              <OtherDocComponent
                setReviewState={handleViewStateChange}
              ></OtherDocComponent>
            )}
          </div>
        </>
      )}
    </div>
  );
}
